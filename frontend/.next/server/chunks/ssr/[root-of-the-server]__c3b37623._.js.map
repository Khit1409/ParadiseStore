{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///D:/all-projects/ParadiseStore/frontend/src/redux/menuSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\ninterface MenuState {\n  responsive: boolean;\n}\n\nconst initialState: MenuState = {\n  responsive: false,\n};\n\nconst menuSlice = createSlice({\n  name: \"menu\",\n  initialState,\n  reducers: {\n    openResponsive: (state, action) => {\n      state.responsive = action.payload;\n    },\n  },\n});\n\nexport default menuSlice.reducer;\nexport const { openResponsive } = menuSlice.actions;\n"],"names":[],"mappings":";;;;AAAA;;AAMA,MAAM,eAA0B;IAC9B,YAAY;AACd;AAEA,MAAM,YAAY,CAAA,GAAA,2LAAA,CAAA,cAAW,AAAD,EAAE;IAC5B,MAAM;IACN;IACA,UAAU;QACR,gBAAgB,CAAC,OAAO;YACtB,MAAM,UAAU,GAAG,OAAO,OAAO;QACnC;IACF;AACF;uCAEe,UAAU,OAAO;AACzB,MAAM,EAAE,cAAc,EAAE,GAAG,UAAU,OAAO","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///D:/all-projects/ParadiseStore/frontend/src/redux/authSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\ninterface LoginResponse {\n  access_token: string;\n  resultCode: number;\n  message: string;\n  users: UserType;\n}\ninterface UserType {\n  sub: string;\n  email: string;\n  gender: string;\n  address: string;\n  role: string;\n  phone: string;\n}\n//kiểu của decoded\n//kiểu trả về check auth\ninterface CheckAuthResult {\n  decoded: UserType;\n  resultCode: number;\n}\n\ninterface AuthType {\n  isLoggedIn: boolean;\n  loading: boolean;\n  users: UserType | null;\n  error: string | null;\n  result: LoginResponse | null;\n}\nconst initialState: AuthType = {\n  result: null,\n  isLoggedIn: false,\n  users: null,\n  loading: false,\n  error: null,\n};\n\n//login\nexport const fetchLogin = createAsyncThunk<\n  LoginResponse,\n  { signInput: string; password: string },\n  { rejectValue: string }\n>(\"auth/login\", async ({ signInput, password }, thunkAPI) => {\n  try {\n    const response = await axios.post(`http://localhost:8080/api/auth/login`, {\n      signInput,\n      password,\n    });\n    if (response.data) {\n      return response.data;\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      return thunkAPI.rejectWithValue(\"Cant not post login\");\n    }\n    return thunkAPI.rejectWithValue(\"Server error\");\n  }\n});\n\n//check auth\nexport const checkAuth = createAsyncThunk<\n  CheckAuthResult,\n  void,\n  { rejectValue: string }\n>(\"auth/check\", async (_, thunkAPI) => {\n  try {\n    const response = await axios.post(`http://localhost:8080/api/auth/check`);\n    if (response.data) {\n      return response.data;\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      return thunkAPI.rejectWithValue(\"Axios error\");\n    }\n    return thunkAPI.rejectWithValue(\"Server error\");\n  }\n});\n//slice\nconst authSlice = createSlice({\n  name: \"auht\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    builder\n      // login\n      .addCase(fetchLogin.pending, (state) => {\n        state.error = null;\n        state.isLoggedIn = false;\n        state.loading = true;\n      })\n      .addCase(fetchLogin.fulfilled, (state, action) => {\n        state.result = action.payload;\n        state.loading = false;\n        state.isLoggedIn = true;\n      })\n      .addCase(fetchLogin.rejected, (state, action) => {\n        state.loading = false;\n        state.result = null;\n        state.error = action.payload as string;\n      })\n      // check auth\n      .addCase(checkAuth.pending, (state) => {\n        state.error = null;\n        state.isLoggedIn = false;\n        state.loading = true;\n        state.users = null;\n      })\n      .addCase(checkAuth.fulfilled, (state, action) => {\n        state.loading = false;\n        state.isLoggedIn = true;\n        state.users = action.payload.decoded;\n      })\n      .addCase(checkAuth.rejected, (state, action) => {\n        state.error = action.payload as string;\n        state.loading = false;\n        state.users = null;\n        state.isLoggedIn = false;\n      }),\n});\n\nexport default authSlice.reducer;\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AA6BA,MAAM,eAAyB;IAC7B,QAAQ;IACR,YAAY;IACZ,OAAO;IACP,SAAS;IACT,OAAO;AACT;AAGO,MAAM,aAAa,CAAA,GAAA,2LAAA,CAAA,mBAAgB,AAAD,EAIvC,cAAc,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE;IAC9C,IAAI;QACF,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,CAAC,oCAAoC,CAAC,EAAE;YACxE;YACA;QACF;QACA,IAAI,SAAS,IAAI,EAAE;YACjB,OAAO,SAAS,IAAI;QACtB;IACF,EAAE,OAAO,OAAO;QACd,IAAI,qIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC7B,OAAO,SAAS,eAAe,CAAC;QAClC;QACA,OAAO,SAAS,eAAe,CAAC;IAClC;AACF;AAGO,MAAM,YAAY,CAAA,GAAA,2LAAA,CAAA,mBAAgB,AAAD,EAItC,cAAc,OAAO,GAAG;IACxB,IAAI;QACF,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,CAAC,oCAAoC,CAAC;QACxE,IAAI,SAAS,IAAI,EAAE;YACjB,OAAO,SAAS,IAAI;QACtB;IACF,EAAE,OAAO,OAAO;QACd,IAAI,qIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;YAC7B,OAAO,SAAS,eAAe,CAAC;QAClC;QACA,OAAO,SAAS,eAAe,CAAC;IAClC;AACF;AACA,OAAO;AACP,MAAM,YAAY,CAAA,GAAA,2LAAA,CAAA,cAAW,AAAD,EAAE;IAC5B,MAAM;IACN;IACA,UAAU,CAAC;IACX,eAAe,CAAC,UACd,OACE,QAAQ;SACP,OAAO,CAAC,WAAW,OAAO,EAAE,CAAC;YAC5B,MAAM,KAAK,GAAG;YACd,MAAM,UAAU,GAAG;YACnB,MAAM,OAAO,GAAG;QAClB,GACC,OAAO,CAAC,WAAW,SAAS,EAAE,CAAC,OAAO;YACrC,MAAM,MAAM,GAAG,OAAO,OAAO;YAC7B,MAAM,OAAO,GAAG;YAChB,MAAM,UAAU,GAAG;QACrB,GACC,OAAO,CAAC,WAAW,QAAQ,EAAE,CAAC,OAAO;YACpC,MAAM,OAAO,GAAG;YAChB,MAAM,MAAM,GAAG;YACf,MAAM,KAAK,GAAG,OAAO,OAAO;QAC9B,EACA,aAAa;SACZ,OAAO,CAAC,UAAU,OAAO,EAAE,CAAC;YAC3B,MAAM,KAAK,GAAG;YACd,MAAM,UAAU,GAAG;YACnB,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAChB,GACC,OAAO,CAAC,UAAU,SAAS,EAAE,CAAC,OAAO;YACpC,MAAM,OAAO,GAAG;YAChB,MAAM,UAAU,GAAG;YACnB,MAAM,KAAK,GAAG,OAAO,OAAO,CAAC,OAAO;QACtC,GACC,OAAO,CAAC,UAAU,QAAQ,EAAE,CAAC,OAAO;YACnC,MAAM,KAAK,GAAG,OAAO,OAAO;YAC5B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;YACd,MAAM,UAAU,GAAG;QACrB;AACN;uCAEe,UAAU,OAAO","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///D:/all-projects/ParadiseStore/frontend/src/redux/globalStore.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport menuReducer from \"./menuSlice\";\nimport authReducer from \"./authSlice\";\nexport const globalStore = configureStore({\n  reducer: {\n    menus: menuReducer,\n    auths: authReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof globalStore.getState>;\nexport type AppDispatch = typeof globalStore.dispatch;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACO,MAAM,cAAc,CAAA,GAAA,2LAAA,CAAA,iBAAc,AAAD,EAAE;IACxC,SAAS;QACP,OAAO,yHAAA,CAAA,UAAW;QAClB,OAAO,yHAAA,CAAA,UAAW;IACpB;AACF","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///D:/all-projects/ParadiseStore/frontend/src/redux/provider.tsx"],"sourcesContent":["\"use client\";\n\nimport { Provider } from \"react-redux\";\nimport { globalStore } from \"./globalStore\";\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function ReduxProvider({ children }: Props) {\n  return <Provider store={globalStore}>{children}</Provider>;\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AASO,SAAS,cAAc,EAAE,QAAQ,EAAS;IAC/C,qBAAO,8OAAC,yJAAA,CAAA,WAAQ;QAAC,OAAO,2HAAA,CAAA,cAAW;kBAAG;;;;;;AACxC","debugId":null}}]
}